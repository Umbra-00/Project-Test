name: Umbra Data Science Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: umbra
          POSTGRES_USER: umbra
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U umbra -d umbra"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libcrypt-dev libpq-dev
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest coverage alembic
    
    - name: Wait for PostgreSQL to be ready
      run: |
        echo "Waiting for PostgreSQL to start..."
        for i in $(seq 1 10); do
          pg_isready -h postgres -p 5432 -U umbra -d umbra && break
          echo "PostgreSQL not ready yet. Waiting 5 more seconds..."
          sleep 5
        done
        pg_isready -h postgres -p 5432 -U umbra -d umbra || (echo "PostgreSQL did not start in time" && exit 1)
        echo "PostgreSQL is ready!"
    
    - name: Run database migrations
      env:
        DATABASE_URL: postgresql://umbra:test_password@postgres:5432/umbra
      run: |
        alembic upgrade head
    
    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://umbra:test_password@postgres:5432/umbra
      run: |
        coverage run -m pytest tests/
        coverage xml
    
    - name: Check PostgreSQL logs
      if: always()
      run: docker logs postgres

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Render
      env:
        RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
      run: |
        curl -X POST $RENDER_DEPLOY_HOOK

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.11'
    
    - name: Install Bandit
      run: pip install bandit
    
    - name: Run Bandit
      run: bandit -r src/ -f custom --skip B104 --severity-level low --confidence-level low

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.11'
    
    - name: Install linters
      run: pip install ruff black==25.1.0
    
    - name: Auto-format with Black
      run: black src/

    - name: Run linters
      run: |
        ruff check src/
        ruff format --check src/
        black --check src/